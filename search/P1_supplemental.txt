Answer questions marked as "QS"

QS1.1:
For DFS, I used a stack because it follows the Last In, First Out (LIFO) order.
 This makes it easy to explore a path deeply before backtracking when necessary.
 Since DFS keeps going down one path until it hits a dead-end,
  a stack is the best choice to keep track of the unexplored paths.

QS1.2:
The exploration order is mostly what I expected.
 Since DFS goes as deep as possible before backtracking,
 I noticed that Pacman doesn’t always take the most direct path to the goal.
 He explores a lot of unnecessary spaces, which isn’t ideal.
 Pacman does not visit every explored square on the way to the goal because DFS
  sometimes expands nodes it doesn’t actually need for the final path.

QS2.1:
For BFS, I used a queue since it follows the First In, First Out (FIFO) order.
 This means the first nodes added to the queue get explored first,
 which ensures that BFS finds the shortest path in terms of the number of actions taken.

QS3.1:
For Uniform Cost Search (UCS), I used a simple cost function where each move has a cost of 1.
 This ensures that UCS finds the shortest path in terms of actual movement cost.

For StayEastSearchAgent and StayWestSearchAgent,
 I used an exponential cost function where moving west had a higher cost and moving east had a lower cost.
 This forces Pacman to prefer moving east or west, depending on the agent.

QS4.1:

The nullHeuristic always returns 0, which means A* behaves like UCS and explores a lot of unnecessary nodes.
This makes it slow but still guarantees the optimal solution.

The Manhattan distance heuristic estimates the distance to the goal by summing the absolute differences in x and y coordinates.
 This makes A* much faster because it prioritizes nodes that seem closer to the goal.
 Since the Manhattan distance never overestimates the true cost, it helps A* expand fewer nodes while still guaranteeing the optimal path.

QS5.1:

Each state is represented as a tuple with two tuples inside, one representing the (x, y) coordinates
and the other detailing which corners have been visited using a Boolean value (e.g. (False, False, False, False)).

QS5.2:

When the getStartState function is called, the state state is constructed as a tuple. The isGoalState function determines whether
all four corners have been visited by using the built in all() function to check if all values in the visitedCorners tuple are True.

The getSuccessors() function looks at the current state and determines what the possible moves Pacman could take without running into a wall.
It calculates the new (x, y) coordinates and also determines which of the four corners will have been visited if that path is taken. That is then
added to the list of successors. 

QS6.1:

The heuristic chosen here is the Manhattan distance heuristic. Some advantages of the Manhattan heuristic are that it is computationally
inexpensive to compute the distances and it never overestimates the true cost (so it's admissable). 

One potential disadvantage is that it doesn't consider the order of the corners. It only goes to the one that is furthest away. 
It doesn't consider that, once Pacman has visited one corner, it still has to visit the others. 

Yes, the heuristic is consistent because is adheres to the triangle inequality. 

QS7.1:

The heuristic computes the maze distance from Pacman's current position to every remaining food dot and returns the maximum of these distances.
That distance is then used as the estimate. 

The heuristic is both admissable and consistent, and it considers paths that will eventually lead to hard-to-reach areas.

However, repeatedly calculating maze distances can be computationally expensive. It also doesn't consider the order in which the food dots
will be collected. Therefore there is the risk that the cost will be significantly underestimated. 

QS8.1:

BFS is used as our heuristic because it is complete and optimal on unweighted graphs, so it can find the shortest distance to the food.

Some advantages of using BFS are that it guarantees the shortest path and it is easy to implement. 

However, it can be computationally expensive and might explore many more nodes than other heuristics like Manhattan distance might.
